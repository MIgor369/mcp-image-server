from flask import Flask, jsonify, request
import requests
import os

app = Flask(__name__)

# –í—Å—Ç–∞–≤—å —Å–≤–æ–π OpenAI API –∫–ª—é—á (https://platform.openai.com/api-keys)
DALL_E_API_KEY = os.getenv("OPENAI_API_KEY", "sk-–≤–∞—à-–∫–ª—é—á-–∑–¥–µ—Å—å")

# MCP Manifest ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ò–ò
@app.route("/.well-known/mcp.json")
def manifest():
    return jsonify({
        "version": "0.0.1",
        "name": "ImageGenMCP",
        "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –¥–ª—è Telegram, –í–ö, YouTube",
        "functions": [
            {
                "name": "generate_telegram_avatar",
                "description": "–°–æ–∑–¥–∞—ë—Ç –∫—Ä—É–≥–ª—É—é –∏–∫–æ–Ω–∫—É 240x240 –¥–ª—è Telegram –ø–æ —Ç–µ–º–µ",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "topic": {"type": "string", "description": "–¢–µ–º–∞ –∞–≤–∞—Ç–∞—Ä–∞"}
                    },
                    "required": ["topic"]
                }
            },
            {
                "name": "generate_vk_cover",
                "description": "–°–æ–∑–¥–∞—ë—Ç —à–∞–ø–∫—É –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (1590x400) –ø–æ –±—Ä–µ–Ω–¥—É –∏ —Ü–≤–µ—Ç–∞–º",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "brand": {"type": "string"},
                        "colors": {"type": "string"}
                    },
                    "required": ["brand"]
                }
            },
            {
                "name": "generate_youtube_thumbnail",
                "description": "–°–æ–∑–¥–∞—ë—Ç –ø—Ä–µ–≤—å—é –¥–ª—è YouTube (1280x720) —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —ç–º–æ—Ü–∏–µ–π",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "title": {"type": "string"},
                        "emotion": {"type": "string", "enum": ["—É–¥–∏–≤–ª–µ–Ω–∏–µ", "—Ä–∞–¥–æ—Å—Ç—å", "—Å—Ç—Ä–∞—Ö", "–≥–Ω–µ–≤"]}
                    },
                    "required": ["title"]
                }
            }
        ]
    })

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ Telegram
@app.route("/generate_telegram_avatar", methods=["POST"])
def generate_telegram_avatar():
    topic = request.json.get("topic", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
    prompt = f"Minimalist circular logo, 240x240, white background, theme: {topic}, modern, clean, no text"
    return generate_image(prompt, "256x256")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–ø–∫–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
@app.route("/generate_vk_cover", methods=["POST"])
def generate_vk_cover():
    brand = request.json.get("brand", "MyBrand")
    colors = request.json.get("colors", "blue, white")
    prompt = f"Cover for VK group, 1590x400, modern design, brand: {brand}, colors: {colors}, abstract background"
    return generate_image(prompt, "1792x1024")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é YouTube
@app.route("/generate_youtube_thumbnail", methods=["POST"])
def generate_youtube_thumbnail():
    title = request.json.get("title", "–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ")
    emotion = request.json.get("emotion", "—É–¥–∏–≤–ª–µ–Ω–∏–µ")
    prompt = f"YouTube thumbnail, 1280x720, bold text: '{title}', person with {emotion} expression, clickbait style"
    return generate_image(prompt, "1280x720")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ DALL¬∑E
def generate_image(prompt, size):
    try:
        response = requests.post(
            "https://api.openai.com/v1/images/generations",
            headers={"Authorization": f"Bearer {DALL_E_API_KEY}"},
            json={"prompt": prompt, "n": 1, "size": size}
        )
        data = response.json()
        image_url = data["data"][0]["url"]
        return jsonify({"image_url": image_url, "prompt": prompt})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    print("üîß MCP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
    print("üìå –î–æ–±–∞–≤—å –≤ Make.com –∏–ª–∏ ChatGPT: http://localhost:5000/.well-known/mcp.json")
    app.run(port=5000, debug=True)